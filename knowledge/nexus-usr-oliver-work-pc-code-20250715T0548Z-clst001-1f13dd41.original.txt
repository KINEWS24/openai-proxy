2 COMPLETE EDITION - SIMPLIFIED PROMPT SYSTEM + PHASE 3 CODE-AWARE SEARCH!// --- SCHRITT 1: IMPORTS & KONSTANTEN ---const express = require("express");const cors = require("cors");const fs = require("fs").promises;const fsSync = require("fs");const path = require("path");const crypto = require("crypto");const { uuidv7 } = require("uuidv7");const { OpenAI } = require("openai");const { google } = require("googleapis");const cheerio = require("cheerio");const puppeteer = require("puppeteer");const fetch = require("node-fetch");// Nexus-All-in-One-Routerconst nexusRouter = require("./modules/nexus");// 🆕 PHASE 3: Code-Aware Search Moduleconst codeSearch = require('./modules/code-search');// Globale Konfigurationenconst KNOWLEDGE_DIR = path.join(__dirname, "knowledge");const CAPTURE_PROMPT_PATH = path.join(__dirname, "nexus_prompt_v5.3.txt");const CLASSIFIER_PROMPT_PATH= path.join(__dirname, "nexus_prompt_classifier_v1.0.txt");const CLASSIFIER_OUTPUT_DIR = path.join(__dirname, "classifier-output");const OPENAI_API_KEY = process.env.OPENAI_API_KEY;const SCRAPER_API_KEY = process.env.SCRAPER_API_KEY;const MAX_CONTENT_LENGTH = 8000;const COMPLETION_MODEL = "gpt-4o";const PORT = process.env.PORT || 10000;// v6.2 Enhanced Constantsconst SIMPLIFIED_PROMPT_ENABLED = true; // Feature flag for gradual rollout// === v6.2 UUID-FORMAT KONSTANTEN ===const NEXUS_V62_OWNER = 'oliver'; // Single-User Systemconst NEXUS_V62_ENTRY_POINT = 'pc'; // Browser Extensionconst NEXUS_V62_CLUSTER = 'clst001'; // Standard Cluster// Workspace-Abkürzungen für kompakte Dateinamenconst WORKSPACE_CODES = {'professional': 'work','personal': 'home','social': 'community'};// Vereinheitlichte Archetype-Liste (lowercase für Dateinamen)const VALID_ARCHETYPES = {'Calendar': 'calendar','Contact': 'contact','Email': 'email','Project': 'project','Link': 'link','Document': 'document','Text': 'text','Image': 'image','Audio': 'audio','Video': 'video','Data': 'data','Code': 'code', // 🆕 Phase 1: Code Archetype'Mixed': 'mixed'};// Default-Optionen für Chatconst defaultChatOptions = {topK: 10,sortBy: "relevance",includeHighlights: true};// Globale Instanzenlet openai;// 🚀 PERFORMANCE CACHE SYSTEM v6.1let knowledgeCache = new Map(); // filename -> parsed metadatalet searchIndex = new Map(); // filename -> searchable textlet workspaceCache = new Map(); // workspace -> fileslet clusterCache = new Map(); // cluster_id -> related fileslet entryPointCache = new Map(); // entry_point -> fileslet uuidVersionMap = new Map(); // filename -> uuid_version (legacy vs v6.1)let lastCacheUpdate = null;let fileWatcher = null;// --- v6.1 UUID SCHEMA DEFINITIONEN ---const NEXUS_V61_ARCHETYPEN = ['Text', 'Image', 'Link', 'Audio', 'Video','Document', 'Data', 'Message', 'Mixed'];const NEXUS_V61_WORKSPACES = {personal: ['home', 'mobile'],professional: ['work', 'team', 'org'],social: ['family', 'club', 'hobby', 'community']};const NEXUS_V61_ENTRY_POINTS = ['pc', 'mobile', 'office', 'auto'];// --- SCHRITT 2: v6.1 UUID & CACHE FUNKTIONEN ---/**🆔 v6.1 UUID Parser - Erkennt v6.1 Format und Legacy UUIDs@param {string} filename - Dateiname@returns {object} Parsed UUID components oder null*/function parseNexusUUID(filename) {// Extrahiere UUID aus Dateiname (remove .tags.json)const baseFilename = filename.replace('.tags.json', ''); // v6.1 Format: nexus-v6-{scope}-{owner}-{workspace}-{entry_point}-{archetype}-{timestamp}-{cluster_id}-{unique_id}const v61Pattern = /^nexus-v6-([^-]+)-([^-]+)-([^-]+)-([^-]+)-([^-]+)-([^-]+)-([^-]+)-([^-]+)$/;const v61Match = baseFilename.match(v61Pattern); if (v61Match) {return {version: 'v6.1',scope: v61Match[1],owner: v61Match[2],workspace: v61Match[3],entry_point: v61Match[4],archetype: v61Match[5],timestamp: v61Match[6],cluster_id: v61Match[7],unique_id: v61Match[8],full_uuid: baseFilename};} // Legacy Format (alles andere)return {version: 'legacy',workspace: 'work', // Default für Legacyentry_point: 'pc', // Default für Legacyarchetype: 'Mixed', // Default für Legacycluster_id: 'clst000', // Legacy Clusterfull_uuid: baseFilename,timestamp: null};}/**🏗️ Workspace-aware Cache Loading@param {string} workspace - Target workspace oder 'all'@returns {Map} Filtered cache für Workspace*/function getWorkspaceCache(workspace = 'all') {if (workspace === 'all') {return knowledgeCache;} const workspaceFiles = new Map(); for (const [filename, metadata] of knowledgeCache.entries()) {const uuidData = parseNexusUUID(filename);if (uuidData && uuidData.workspace === workspace) {workspaceFiles.set(filename, metadata);}} return workspaceFiles;}/**🔍 Entry-Point Detection Logic@param {object} metadata - File metadata@param {object} uuidData - Parsed UUID data@returns {string} Detected entry point*/function detectEntryPoint(metadata, uuidData) {// v6.1 UUIDs haben bereits entry_pointif (uuidData.version === 'v6.1') {return uuidData.entry_point;} // Legacy Detection Logicconst properties = metadata.Properties || {}; // Mobile indicatorsif (properties.device_type === 'mobile' ||properties.capture_method === 'mobile' ||properties.geo_data) {return 'mobile';} // Office indicatorsif (properties.meeting_context ||properties.calendar_event ||properties.attendees) {return 'office';} // Auto indicatorsif (properties.automated ||properties.api_generated ||properties.scheduled) {return 'auto';} // Defaultreturn 'pc';}/**🧩 Cluster Analysis - Findet verwandte Objekte@param {object} uuidData - Parsed UUID data@param {object} metadata - File metadata@returns {Array} Related cluster objects*/function analyzeClusterRelations(uuidData, metadata) {const relatedObjects = []; if (uuidData.version === 'v6.1' && uuidData.cluster_id !== 'clst000') {// Finde andere Objekte im gleichen Clusterfor (const [filename, _] of knowledgeCache.entries()) {const otherUuid = parseNexusUUID(filename);if (otherUuid.version === 'v6.1' &&otherUuid.cluster_id === uuidData.cluster_id &&otherUuid.full_uuid !== uuidData.full_uuid) {relatedObjects.push({filename,cluster_id: otherUuid.cluster_id,relationship: 'cluster_member'});}}} return relatedObjects;}/**📊 Enhanced Cache Statistics - v6.1 Metrics*/function getEnhancedCacheStats() {const stats = {total_files: knowledgeCache.size,v61_files: 0,legacy_files: 0,workspaces: {},entry_points: {},archetypen: {},clusters: new Set(),last_update: lastCacheUpdate}; for (const [filename, metadata] of knowledgeCache.entries()) {const uuidData = parseNexusUUID(filename); if (uuidData.version === 'v6.1') {stats.v61_files++; // Workspace statsstats.workspaces[uuidData.workspace] = (stats.workspaces[uuidData.workspace] || 0) + 1; // Entry point statsstats.entry_points[uuidData.entry_point] = (stats.entry_points[uuidData.entry_point] || 0) + 1; // Archetyp statsstats.archetypen[uuidData.archetype] = (stats.archetypen[uuidData.archetype] || 0) + 1; // Cluster trackingif (uuidData.cluster_id !== 'clst000') {stats.clusters.add(uuidData.cluster_id);}} else {stats.legacy_files++;}} stats.cluster_count = stats.clusters.size;delete stats.clusters; // Convert Set to count return stats;}/**🚀 PERFORMANCE: Lädt alle Knowledge-Dateien beim Server-Start in Memory (v6.1 Enhanced)*/async function buildKnowledgeCache() {console.log('[CACHE v6.1] Building enhanced knowledge cache…');const startTime = Date.now(); try {const allFiles = await fs.readdir(KNOWLEDGE_DIR);const jsonFiles = allFiles.filter(f => f.endsWith(".tags.json")); console.log([CACHE v6.1] Found ${jsonFiles.length} knowledge files to cache); // Clear existing cachesknowledgeCache.clear();searchIndex.clear();workspaceCache.clear();clusterCache.clear();entryPointCache.clear();uuidVersionMap.clear(); // Load all files in parallel for maximum speedconst loadPromises = jsonFiles.map(async (filename) => {try {const filePath = path.join(KNOWLEDGE_DIR, filename);const content = await fs.readFile(filePath, "utf8");const metadata = JSON.parse(content); // Parse UUID for v6.1 features const uuidData = parseNexusUUID(filename); const entryPoint = detectEntryPoint(metadata, uuidData); // C